/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import authService from "./components/api-authorization/AuthorizeService";
export class BaseClass {

    protected transformOptions = async (options: RequestInit): Promise<RequestInit> => {
        let token =await authService.getAccessToken(); // your custom logic to get the token

        options.headers = {
            ...options.headers,
            Authorization: 'Bearer ' + token,
        };
        return Promise.resolve(options);
    };
}

export class AddressClient extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserAddressList(): Promise<UserAddressListVm> {
        let url_ = this.baseUrl + "/Address/GetUserAddressList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetUserAddressList(_response);
        });
    }

    protected processGetUserAddressList(response: Response): Promise<UserAddressListVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserAddressListVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserAddressListVm>(<any>null);
    }

    create(city: string | null | undefined, addressDetail: string | null | undefined, number: string | null | undefined, userId: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (city !== null && city !== undefined)
            content_.append("City", city.toString());
        if (addressDetail !== null && addressDetail !== undefined)
            content_.append("AddressDetail", addressDetail.toString());
        if (number !== null && number !== undefined)
            content_.append("Number", number.toString());
        if (userId !== null && userId !== undefined)
            content_.append("UserId", userId.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    update(id: number | undefined, city: string | null | undefined, addressDetail: string | null | undefined, number: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("id", id.toString());
        if (city !== null && city !== undefined)
            content_.append("City", city.toString());
        if (addressDetail !== null && addressDetail !== undefined)
            content_.append("AddressDetail", addressDetail.toString());
        if (number !== null && number !== undefined)
            content_.append("Number", number.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class CategoryClient extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCategoryList(): Promise<CategoryVm> {
        let url_ = this.baseUrl + "/Category/getCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetCategoryList(_response);
        });
    }

    protected processGetCategoryList(response: Response): Promise<CategoryVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryVm>(<any>null);
    }

    get(): Promise<TreeItemOfCategoryDto[]> {
        let url_ = this.baseUrl + "/Category/getCategoryTree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<TreeItemOfCategoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeItemOfCategoryDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TreeItemOfCategoryDto[]>(<any>null);
    }

    create(name: string | null | undefined, farsiName: string | null | undefined, imageContent: FileParameter | null | undefined, parentId: number | undefined, specifications: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Category";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (farsiName !== null && farsiName !== undefined)
            content_.append("FarsiName", farsiName.toString());
        if (imageContent !== null && imageContent !== undefined)
            content_.append("ImageContent", imageContent.data, imageContent.fileName ? imageContent.fileName : "ImageContent");
        if (parentId === null || parentId === undefined)
            throw new Error("The parameter 'parentId' cannot be null.");
        else
            content_.append("ParentId", parentId.toString());
        if (specifications !== null && specifications !== undefined)
            content_.append("Specifications", specifications.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class ProductClient extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProductCategoryList(): Promise<ProductCategoryVm> {
        let url_ = this.baseUrl + "/Product/GetProductCategoryList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetProductCategoryList(_response);
        });
    }

    protected processGetProductCategoryList(response: Response): Promise<ProductCategoryVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductCategoryVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductCategoryVm>(<any>null);
    }

    getlist(): Promise<ProductVm> {
        let url_ = this.baseUrl + "/Product/ProductList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetlist(_response);
        });
    }

    protected processGetlist(response: Response): Promise<ProductVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductVm>(<any>null);
    }

    create(brandName: string | null | undefined, description: string | null | undefined, shortDescription: string | null | undefined, name: string | null | undefined, farsiName: string | null | undefined, price: number | undefined, image: FileParameter | null | undefined, productSpecifications: string | null | undefined, categoryId: number | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (brandName !== null && brandName !== undefined)
            content_.append("BrandName", brandName.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (shortDescription !== null && shortDescription !== undefined)
            content_.append("ShortDescription", shortDescription.toString());
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (farsiName !== null && farsiName !== undefined)
            content_.append("FarsiName", farsiName.toString());
        if (price === null || price === undefined)
            throw new Error("The parameter 'price' cannot be null.");
        else
            content_.append("Price", price.toString());
        if (image !== null && image !== undefined)
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");
        if (productSpecifications !== null && productSpecifications !== undefined)
            content_.append("ProductSpecifications", productSpecifications.toString());
        if (categoryId === null || categoryId === undefined)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else
            content_.append("CategoryId", categoryId.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class ShoppingCartClient extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCartProductList(): Promise<CartProductVm> {
        let url_ = this.baseUrl + "/ShoppingCart/GetCartProductList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetCartProductList(_response);
        });
    }

    protected processGetCartProductList(response: Response): Promise<CartProductVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CartProductVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CartProductVm>(<any>null);
    }

    create(command: CreateCartProductCommand): Promise<number> {
        let url_ = this.baseUrl + "/ShoppingCart/createCartProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    delete(command: DeleteCartProductCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/ShoppingCart/deleteCartProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(<any>null);
    }
}

export class UserClient extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<UserVm> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<UserVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserVm>(<any>null);
    }
}

export class UserAddressListVm implements IUserAddressListVm {
    userAddressListDto?: UserAddressListDto[] | undefined;

    constructor(data?: IUserAddressListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userAddressListDto"])) {
                this.userAddressListDto = [] as any;
                for (let item of _data["userAddressListDto"])
                    this.userAddressListDto!.push(UserAddressListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAddressListVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddressListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userAddressListDto)) {
            data["userAddressListDto"] = [];
            for (let item of this.userAddressListDto)
                data["userAddressListDto"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserAddressListVm {
    userAddressListDto?: UserAddressListDto[] | undefined;
}

export class UserAddressListDto implements IUserAddressListDto {
    id?: number;
    city?: string | undefined;
    addressDetail?: string | undefined;
    number?: string | undefined;

    constructor(data?: IUserAddressListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.city = _data["city"];
            this.addressDetail = _data["addressDetail"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): UserAddressListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddressListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["city"] = this.city;
        data["addressDetail"] = this.addressDetail;
        data["number"] = this.number;
        return data; 
    }
}

export interface IUserAddressListDto {
    id?: number;
    city?: string | undefined;
    addressDetail?: string | undefined;
    number?: string | undefined;
}

export class CategoryVm implements ICategoryVm {
    categoryDtos?: CategoryDto[] | undefined;

    constructor(data?: ICategoryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categoryDtos"])) {
                this.categoryDtos = [] as any;
                for (let item of _data["categoryDtos"])
                    this.categoryDtos!.push(CategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryVm {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categoryDtos)) {
            data["categoryDtos"] = [];
            for (let item of this.categoryDtos)
                data["categoryDtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategoryVm {
    categoryDtos?: CategoryDto[] | undefined;
}

export class CategoryDto implements ICategoryDto {
    id?: number;
    name?: string | undefined;
    farsiName?: string | undefined;
    image?: string | undefined;
    content?: string | undefined;
    parentId?: number | undefined;
    specifications?: Specification[] | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.image = _data["image"];
            this.content = _data["content"];
            this.parentId = _data["parentId"];
            if (Array.isArray(_data["specifications"])) {
                this.specifications = [] as any;
                for (let item of _data["specifications"])
                    this.specifications!.push(Specification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["image"] = this.image;
        data["content"] = this.content;
        data["parentId"] = this.parentId;
        if (Array.isArray(this.specifications)) {
            data["specifications"] = [];
            for (let item of this.specifications)
                data["specifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategoryDto {
    id?: number;
    name?: string | undefined;
    farsiName?: string | undefined;
    image?: string | undefined;
    content?: string | undefined;
    parentId?: number | undefined;
    specifications?: Specification[] | undefined;
}

export class Specification implements ISpecification {
    id?: number;
    specificationKey?: string | undefined;
    categoryId?: number;
    category?: Category | undefined;

    constructor(data?: ISpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.specificationKey = _data["specificationKey"];
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Specification {
        data = typeof data === 'object' ? data : {};
        let result = new Specification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["specificationKey"] = this.specificationKey;
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISpecification {
    id?: number;
    specificationKey?: string | undefined;
    categoryId?: number;
    category?: Category | undefined;
}

export class Category implements ICategory {
    id?: number;
    name?: string | undefined;
    farsiName?: string | undefined;
    image?: string | undefined;
    parentId?: number;
    content?: string | undefined;
    productCategories?: ProductCategory[] | undefined;
    specifications?: Specification[] | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.image = _data["image"];
            this.parentId = _data["parentId"];
            this.content = _data["content"];
            if (Array.isArray(_data["productCategories"])) {
                this.productCategories = [] as any;
                for (let item of _data["productCategories"])
                    this.productCategories!.push(ProductCategory.fromJS(item));
            }
            if (Array.isArray(_data["specifications"])) {
                this.specifications = [] as any;
                for (let item of _data["specifications"])
                    this.specifications!.push(Specification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["image"] = this.image;
        data["parentId"] = this.parentId;
        data["content"] = this.content;
        if (Array.isArray(this.productCategories)) {
            data["productCategories"] = [];
            for (let item of this.productCategories)
                data["productCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.specifications)) {
            data["specifications"] = [];
            for (let item of this.specifications)
                data["specifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategory {
    id?: number;
    name?: string | undefined;
    farsiName?: string | undefined;
    image?: string | undefined;
    parentId?: number;
    content?: string | undefined;
    productCategories?: ProductCategory[] | undefined;
    specifications?: Specification[] | undefined;
}

export class ProductCategory implements IProductCategory {
    id?: number;
    productId?: number;
    categoryId?: number;
    product?: Product | undefined;
    category?: Category | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productId = _data["productId"];
            this.categoryId = _data["categoryId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["categoryId"] = this.categoryId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IProductCategory {
    id?: number;
    productId?: number;
    categoryId?: number;
    product?: Product | undefined;
    category?: Category | undefined;
}

export class Product implements IProduct {
    id?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    categoryId?: number;
    cartProducts?: CartProduct[] | undefined;
    productSpecifications?: ProductSpecification[] | undefined;
    productCategories?: ProductCategory[] | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.brandName = _data["brandName"];
            this.description = _data["description"];
            this.shortDescription = _data["shortDescription"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.price = _data["price"];
            this.image = _data["image"];
            this.categoryId = _data["categoryId"];
            if (Array.isArray(_data["cartProducts"])) {
                this.cartProducts = [] as any;
                for (let item of _data["cartProducts"])
                    this.cartProducts!.push(CartProduct.fromJS(item));
            }
            if (Array.isArray(_data["productSpecifications"])) {
                this.productSpecifications = [] as any;
                for (let item of _data["productSpecifications"])
                    this.productSpecifications!.push(ProductSpecification.fromJS(item));
            }
            if (Array.isArray(_data["productCategories"])) {
                this.productCategories = [] as any;
                for (let item of _data["productCategories"])
                    this.productCategories!.push(ProductCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["brandName"] = this.brandName;
        data["description"] = this.description;
        data["shortDescription"] = this.shortDescription;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["price"] = this.price;
        data["image"] = this.image;
        data["categoryId"] = this.categoryId;
        if (Array.isArray(this.cartProducts)) {
            data["cartProducts"] = [];
            for (let item of this.cartProducts)
                data["cartProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.productSpecifications)) {
            data["productSpecifications"] = [];
            for (let item of this.productSpecifications)
                data["productSpecifications"].push(item.toJSON());
        }
        if (Array.isArray(this.productCategories)) {
            data["productCategories"] = [];
            for (let item of this.productCategories)
                data["productCategories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProduct {
    id?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    categoryId?: number;
    cartProducts?: CartProduct[] | undefined;
    productSpecifications?: ProductSpecification[] | undefined;
    productCategories?: ProductCategory[] | undefined;
}

export class CartProduct implements ICartProduct {
    id?: number;
    amount?: number;
    productId?: number;
    product?: Product | undefined;

    constructor(data?: ICartProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.amount = _data["amount"];
            this.productId = _data["productId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CartProduct {
        data = typeof data === 'object' ? data : {};
        let result = new CartProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICartProduct {
    id?: number;
    amount?: number;
    productId?: number;
    product?: Product | undefined;
}

export class ProductSpecification implements IProductSpecification {
    id?: number;
    specificationId?: number;
    productId?: number;
    product?: Product | undefined;
    specificationValue?: string | undefined;

    constructor(data?: IProductSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.specificationId = _data["specificationId"];
            this.productId = _data["productId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.specificationValue = _data["specificationValue"];
        }
    }

    static fromJS(data: any): ProductSpecification {
        data = typeof data === 'object' ? data : {};
        let result = new ProductSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["specificationId"] = this.specificationId;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["specificationValue"] = this.specificationValue;
        return data; 
    }
}

export interface IProductSpecification {
    id?: number;
    specificationId?: number;
    productId?: number;
    product?: Product | undefined;
    specificationValue?: string | undefined;
}

export class TreeItemOfCategoryDto implements ITreeItemOfCategoryDto {
    item?: CategoryDto | undefined;
    children?: TreeItemOfCategoryDto[] | undefined;

    constructor(data?: ITreeItemOfCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item = _data["item"] ? CategoryDto.fromJS(_data["item"]) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(TreeItemOfCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TreeItemOfCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new TreeItemOfCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITreeItemOfCategoryDto {
    item?: CategoryDto | undefined;
    children?: TreeItemOfCategoryDto[] | undefined;
}

export class ProductCategoryVm implements IProductCategoryVm {
    productCategoryDtos?: ProductCategoryDto[] | undefined;

    constructor(data?: IProductCategoryVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["productCategoryDtos"])) {
                this.productCategoryDtos = [] as any;
                for (let item of _data["productCategoryDtos"])
                    this.productCategoryDtos!.push(ProductCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductCategoryVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productCategoryDtos)) {
            data["productCategoryDtos"] = [];
            for (let item of this.productCategoryDtos)
                data["productCategoryDtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductCategoryVm {
    productCategoryDtos?: ProductCategoryDto[] | undefined;
}

export class ProductCategoryDto implements IProductCategoryDto {
    productId?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    lastCategoryId?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    categoryFarsiName?: string | undefined;

    constructor(data?: IProductCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.brandName = _data["brandName"];
            this.description = _data["description"];
            this.shortDescription = _data["shortDescription"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.price = _data["price"];
            this.image = _data["image"];
            this.lastCategoryId = _data["lastCategoryId"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.categoryFarsiName = _data["categoryFarsiName"];
        }
    }

    static fromJS(data: any): ProductCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["brandName"] = this.brandName;
        data["description"] = this.description;
        data["shortDescription"] = this.shortDescription;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["price"] = this.price;
        data["image"] = this.image;
        data["lastCategoryId"] = this.lastCategoryId;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["categoryFarsiName"] = this.categoryFarsiName;
        return data; 
    }
}

export interface IProductCategoryDto {
    productId?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    lastCategoryId?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    categoryFarsiName?: string | undefined;
}

export class ProductVm implements IProductVm {
    productDtos?: ProductDto[] | undefined;

    constructor(data?: IProductVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["productDtos"])) {
                this.productDtos = [] as any;
                for (let item of _data["productDtos"])
                    this.productDtos!.push(ProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductVm {
        data = typeof data === 'object' ? data : {};
        let result = new ProductVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productDtos)) {
            data["productDtos"] = [];
            for (let item of this.productDtos)
                data["productDtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductVm {
    productDtos?: ProductDto[] | undefined;
}

export class ProductDto implements IProductDto {
    id?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    categoryId?: number;
    specifications?: KeyValueSpecification[] | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.brandName = _data["brandName"];
            this.description = _data["description"];
            this.shortDescription = _data["shortDescription"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.price = _data["price"];
            this.image = _data["image"];
            this.categoryId = _data["categoryId"];
            if (Array.isArray(_data["specifications"])) {
                this.specifications = [] as any;
                for (let item of _data["specifications"])
                    this.specifications!.push(KeyValueSpecification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["brandName"] = this.brandName;
        data["description"] = this.description;
        data["shortDescription"] = this.shortDescription;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["price"] = this.price;
        data["image"] = this.image;
        data["categoryId"] = this.categoryId;
        if (Array.isArray(this.specifications)) {
            data["specifications"] = [];
            for (let item of this.specifications)
                data["specifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductDto {
    id?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
    categoryId?: number;
    specifications?: KeyValueSpecification[] | undefined;
}

export class KeyValueSpecification implements IKeyValueSpecification {
    key?: string | undefined;
    value?: string | undefined;

    constructor(data?: IKeyValueSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValueSpecification {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValueSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IKeyValueSpecification {
    key?: string | undefined;
    value?: string | undefined;
}

export class CartProductVm implements ICartProductVm {
    cartProductDtos?: CartProductDto[] | undefined;

    constructor(data?: ICartProductVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cartProductDtos"])) {
                this.cartProductDtos = [] as any;
                for (let item of _data["cartProductDtos"])
                    this.cartProductDtos!.push(CartProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CartProductVm {
        data = typeof data === 'object' ? data : {};
        let result = new CartProductVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cartProductDtos)) {
            data["cartProductDtos"] = [];
            for (let item of this.cartProductDtos)
                data["cartProductDtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICartProductVm {
    cartProductDtos?: CartProductDto[] | undefined;
}

export class CartProductDto implements ICartProductDto {
    id?: number;
    amount?: number;
    productId?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;

    constructor(data?: ICartProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.amount = _data["amount"];
            this.productId = _data["productId"];
            this.brandName = _data["brandName"];
            this.description = _data["description"];
            this.shortDescription = _data["shortDescription"];
            this.name = _data["name"];
            this.farsiName = _data["farsiName"];
            this.price = _data["price"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): CartProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        data["productId"] = this.productId;
        data["brandName"] = this.brandName;
        data["description"] = this.description;
        data["shortDescription"] = this.shortDescription;
        data["name"] = this.name;
        data["farsiName"] = this.farsiName;
        data["price"] = this.price;
        data["image"] = this.image;
        return data; 
    }
}

export interface ICartProductDto {
    id?: number;
    amount?: number;
    productId?: number;
    brandName?: string | undefined;
    description?: string | undefined;
    shortDescription?: string | undefined;
    name?: string | undefined;
    farsiName?: string | undefined;
    price?: number;
    image?: string | undefined;
}

export class CreateCartProductCommand implements ICreateCartProductCommand {
    amount?: number;
    productId?: number;

    constructor(data?: ICreateCartProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): CreateCartProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCartProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["productId"] = this.productId;
        return data; 
    }
}

export interface ICreateCartProductCommand {
    amount?: number;
    productId?: number;
}

export class Unit implements IUnit {

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUnit {
}

export class DeleteCartProductCommand implements IDeleteCartProductCommand {
    id?: number;

    constructor(data?: IDeleteCartProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCartProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCartProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeleteCartProductCommand {
    id?: number;
}

export class UserVm implements IUserVm {
    userDto?: UserDto | undefined;

    constructor(data?: IUserVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userDto = _data["userDto"] ? UserDto.fromJS(_data["userDto"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userDto"] = this.userDto ? this.userDto.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserVm {
    userDto?: UserDto | undefined;
}

export class UserDto implements IUserDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IUserDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}